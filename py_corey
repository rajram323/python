### lec 40 ### Python OOP Tutorial 1: Classes and Instances ###
### https://www.youtube.com/watch?v=ZDa-Z5JzLYM&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=40 ###
class Employee:
    pass

emp_1 = Employee()
emp_1 = Employee()

# check for same memory location
print(emp_1)
print(emp_2)

emp_1.first = 'Corey'
emp_1.last = 'Schafer'
emp_1.email = 'Corey.Schafer'
emp_1.pay = 50000

emp_2.first = 'Test'
emp_2.last = 'User'
emp_2.email = 'Test.User@company.com'
emp_2.pay = 50000

print(emp_1.email)
print(emp_2.eamil)

# solve upper problem using __init__()
class Employee:

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

print(emp_1.email)
print(emp_2.eamil)

print('{} {}'.format(self.first, self.last))

# make common print

class Employee:

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    # self is passed first argument, if not passed gives error
    def fullname(self):
        return '{} {}'.format(self.first, self.last)

emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

print(emp_1.email)
print(emp_2.eamil)

# gives error
print(emp_1.fullname)

print(emp_1.fullname())

emp_1.fullname()
Employee.fullname(emp_1)
print(Employee.fullname(emp_1))
# to run using class instance variable should be passed

### lec 41 ### Python OOP Tutorial 2: Class Variables ###
### https://www.youtube.com/watch?v=BJ-VvGyQxho&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=41 ###
class Employee:
  
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * 1.04)

emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

print(emp_1.pay)
emp_1.apply_raise()
print(emp_1.pay)

# raise amount singly can not be used
class Employee:

    raise_amouunt = 1.04
  
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        # self.pay = int(self.pay * 1.04)
        # gives error
        # self.pay = int(self.pay * raise_amouunt)
        # correct
        # self.pay = int(self.pay * Employee.raise_amouunt)
        # correct
        self.pay = int(self.pay * self.raise_amouunt) 

# gives same out put instance var emp_1, emp_2 check for raise amount instance var if not found go to class var
print(Employee.raise_amount)
print(emp_1.raise_amount)
print(emp_2.raise_amount)

Employee.raise_amount = 1.05

# changes all
print(Employee.raise_amount)
print(emp_1.raise_amount)
print(emp_2.raise_amount)

# to check if instance var has raise amount var or not
print(Employee.__dict__)
print(emp_1.__dict__)
print(emp_2.__dict__)

# if instance var changed new var created and that instance has the new value
emp_1.raise_amount = 2.08
# check only emp_1 raise amount is changed
print(Employee.raise_amount)
print(emp_1.raise_amount)
print(emp_2.raise_amount)
# in emp_1 instance var a new var raise_amount is created
print(Employee.__dict__)
print(emp_1.__dict__)
print(emp_2.__dict__)


# create class var to count no of instance created
class Employee:

    no_of_employees = 0  
    raise_amouunt = 1.04
    
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay
      
        Employee.no_of_employees += 1
    
  def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * Employee.raise_amouunt)

print(Employee.no_of_employees)
      
### lec 42 ### Python OOP Tutorial 3: classmethods and staticmethods ###
### https://www.youtube.com/watch?v=rq8cL2XMM5M&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=42 ###

class Employee:

    num_of_emps = 0
    raise_amt = 1.04

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

        Employee.num_of_emps += 1

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)

    # class methos should have cls passed
    @classmethod
    def set_raise_amt(cls, amount):
        cls.raise_amt = amount
  
    @classmethod
    def from_string(cls, emp_str):
        first, last, pay = emp_str.split('-')
        return cls(first, last, pay)

    # static method do not need cls
    @staticmethod
    def is_workday(day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        return True


emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

Employee.set_raise_amt(1.05)

print(Employee.raise_amt)
print(emp_1.raise_amt)
print(emp_2.raise_amt)

emp_str_1 = 'John-Doe-70000'
emp_str_2 = 'Steve-Smith-30000'
emp_str_3 = 'Jane-Doe-90000'

first, last, pay = emp_str_1.split('-')

#new_emp_1 = Employee(first, last, pay)
# solve to directly string pass
new_emp_1 = Employee.from_string(emp_str_1)

print(new_emp_1.email)
print(new_emp_1.pay)

# inside date time package also static method is used
import datetime
my_date = datetime.date(2016, 7, 11)

print(Employee.is_workday(my_date))



