### lec 40 ### Python OOP Tutorial 1: Classes and Instances ###
### https://www.youtube.com/watch?v=ZDa-Z5JzLYM&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=40 ###
class Employee:
    pass

emp_1 = Employee()
emp_1 = Employee()

# check for same memory location
print(emp_1)
print(emp_2)

emp_1.first = 'Corey'
emp_1.last = 'Schafer'
emp_1.email = 'Corey.Schafer'
emp_1.pay = 50000

emp_2.first = 'Test'
emp_2.last = 'User'
emp_2.email = 'Test.User@company.com'
emp_2.pay = 50000

print(emp_1.email)
print(emp_2.eamil)

# solve upper problem using __init__()
class Employee:

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

print(emp_1.email)
print(emp_2.eamil)

print('{} {}'.format(self.first, self.last))

# make common print

class Employee:

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    # self is passed first argument, if not passed gives error
    def fullname(self):
        return '{} {}'.format(self.first, self.last)

emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

print(emp_1.email)
print(emp_2.eamil)

# gives error
print(emp_1.fullname)

print(emp_1.fullname())

emp_1.fullname()
Employee.fullname(emp_1)
print(Employee.fullname(emp_1))
# to run using class instance variable should be passed

### lec 41 ### Python OOP Tutorial 2: Class Variables ###
### https://www.youtube.com/watch?v=BJ-VvGyQxho&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=41 ###
class Employee:
  
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * 1.04)

emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

print(emp_1.pay)
emp_1.apply_raise()
print(emp_1.pay)

# raise amount singly can not be used
class Employee:

    raise_amouunt = 1.04
  
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        # self.pay = int(self.pay * 1.04)
        # gives error
        # self.pay = int(self.pay * raise_amouunt)
        # correct
        # self.pay = int(self.pay * Employee.raise_amouunt)
        # correct
        self.pay = int(self.pay * self.raise_amouunt) 

# gives same out put instance var emp_1, emp_2 check for raise amount instance var if not found go to class var
print(Employee.raise_amount)
print(emp_1.raise_amount)
print(emp_2.raise_amount)

Employee.raise_amount = 1.05

# changes all
print(Employee.raise_amount)
print(emp_1.raise_amount)
print(emp_2.raise_amount)

# to check if instance var has raise amount var or not
print(Employee.__dict__)
print(emp_1.__dict__)
print(emp_2.__dict__)

# if instance var changed new var created and that instance has the new value
emp_1.raise_amount = 2.08
# check only emp_1 raise amount is changed
print(Employee.raise_amount)
print(emp_1.raise_amount)
print(emp_2.raise_amount)
# in emp_1 instance var a new var raise_amount is created
print(Employee.__dict__)
print(emp_1.__dict__)
print(emp_2.__dict__)


# create class var to count no of instance created
class Employee:

    no_of_employees = 0  
    raise_amouunt = 1.04
    
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay
      
        Employee.no_of_employees += 1
    
  def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * Employee.raise_amouunt)

print(Employee.no_of_employees)
      
### lec 42 ### Python OOP Tutorial 3: classmethods and staticmethods ###
### https://www.youtube.com/watch?v=rq8cL2XMM5M&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=42 ###

class Employee:

    num_of_emps = 0
    raise_amt = 1.04

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

        Employee.num_of_emps += 1

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)

    # class methos should have cls passed
    @classmethod
    def set_raise_amt(cls, amount):
        cls.raise_amt = amount
  
    @classmethod
    def from_string(cls, emp_str):
        first, last, pay = emp_str.split('-')
        return cls(first, last, pay)

    # static method do not need cls
    @staticmethod
    def is_workday(day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        return True


emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

Employee.set_raise_amt(1.05)

print(Employee.raise_amt)
print(emp_1.raise_amt)
print(emp_2.raise_amt)

emp_str_1 = 'John-Doe-70000'
emp_str_2 = 'Steve-Smith-30000'
emp_str_3 = 'Jane-Doe-90000'

first, last, pay = emp_str_1.split('-')

#new_emp_1 = Employee(first, last, pay)
# solve to directly string pass
new_emp_1 = Employee.from_string(emp_str_1)

print(new_emp_1.email)
print(new_emp_1.pay)

# inside date time package also static method is used
import datetime
my_date = datetime.date(2016, 7, 11)

print(Employee.is_workday(my_date))

### lec 43 ### Python OOP Tutorial 4: Inheritance - Creating Subclasses ###
### https://www.youtube.com/watch?v=RSl87lqOXDE&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=43 ###

class Employee:

    raise_amt = 1.04

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)


class Developer(Employee):
    # changing the raise amout of parent class for sub class
    # a
    raise_amt = 1.10

    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first, last, pay)
        # Employee.__init__(self, first, last, pay)
        self.prog_lang = prog_lang


class Manager(Employee):

    def __init__(self, first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees is None:
            self.employees = []
        else:
            self.employees = employees

    def add_emp(self, emp):
        if emp not in self.employees:
            self.employees.append(emp)

    def remove_emp(self, emp):
        if emp in self.employees:
            self.employees.remove(emp)

    def print_emps(self):
        for emp in self.employees:
            print('-->', emp.fullname())


dev_1 = Developer('Corey', 'Schafer', 50000, 'Python')
dev_2 = Developer('Test', 'Employee', 60000, 'Java')

mgr_1 = Manager('Sue', 'Smith', 90000, [dev_1])

print(mgr_1.email)

# add dev in list
mgr_1.add_emp(dev_2)
mgr_1.remove_emp(dev_2)

mgr_1.print_emps()

# shows inheriteed methods also method resolution
print(help(Developer))

print(isInstance(mgr_1, Developer))  # false
print(isInstance(mgr_1, Manager))    # true
print(isInstance(mgr_1, Employee))   # true

print(isSubclass(Manager, Developer))    # false
print(isSubclass(Manager, Employee))     # true
print(isSubclass(Developer, Employee))   # true  

### lec 44 ### Python OOP Tutorial 5: Special (Magic/Dunder) Methods ###
### https://www.youtube.com/watch?v=3ohzBxoFHAY&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=44 ###

class Employee:

    raise_amt = 1.04

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)

    def __repr__(self):
        return "Employee('{}', '{}', {})".format(self.first, self.last, self.pay)

    def __str__(self):
        return '{} - {}'.format(self.fullname(), self.email)

    def __add__(self, other):
        return self.pay + other.pay

    def __len__(self):
        return len(self.fullname())


emp_1 = Employee('Corey', 'Schafer', 50000)
emp_2 = Employee('Test', 'Employee', 60000)

# print(emp_1 + emp_2)

print(len(emp_1))

# will print obj if __ref__ and __str__ is not there
# print(emp_1)

# if __str__ is not there __ref__ is called
print(emp_1)

print(repr(emp_1))
print(str(emp_1))

print(emp_1.__repr__())
print(emp_1.__str__())

print(1 + 2)
print('a' + 'b')

print(int.__add__(1,2))
print(str.__add__('a','b'))

print(emp_1 + emp_2)


https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqazB0eTMzRzVKZGlDelFGa3BMTk5kWUloczFBZ3xBQ3Jtc0ttRmt6NzRGSzRic1lNUktSOFkwNElLSDBDTXZ0eTMtN193ZXIxR3ZON3NtWW8wVXRUdHVSVHA5NDVjV0dCNTEzQmtrVTRWbHd1dEtGNkdpQWRFTW1NbWV1QVVRd1J2U2o4RXBHZXVER3lIb3lsYjZvbw&q=https%3A%2F%2Fdocs.python.org%2F3%2Freference%2Fdatamodel.html%23special-method-names&v=3ohzBxoFHAY

print(len('test'))
print('test'.__len__())

print(len(emp_1))

### lec 45 ### Python OOP Tutorial 6: Property Decorators - Getters, Setters, and Deleters ###
### https://www.youtube.com/watch?v=jCzT9XFZ5bw&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=45 ###

class Employee:

    def __init__(self, first, last):
        self.first = first
        self.last = last

    @property
    def email(self):
        return '{}.{}@email.com'.format(self.first, self.last)

    @property
    def fullname(self):
        return '{} {}'.format(self.first, self.last)
    
    @fullname.setter
    def fullname(self, name):
        first, last = name.split(' ')
        self.first = first
        self.last = last
    
    @fullname.deleter
    def fullname(self):
        print('Delete Name!')
        self.first = None
        self.last = None


emp_1 = Employee('John', 'Smith')
emp_1.fullname = "Corey Schafer"

print(emp_1.first)
print(emp_1.email)
# previously only name can only chnged to change emal  do above method
# print(emp_1.fullname())
print(emp_1.fullname)

del emp_1.fullname

# previous problemon below code
emp_1.first = 'shel'
print(emp_1.first)
print(emp_1.email)
print(emp_1.fullname())






















